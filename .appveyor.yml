environment:
  global:
    REPO_DIR: lda
    PACKAGE_NAME: lda
    BUILD_COMMIT: 1.1.0
    BUILD_DEPENDS: "cython"
    TEST_DEPENDS: "scipy"
    WHEELHOUSE_UPLOADER_REGION: IAD
    WHEELHOUSE_UPLOADER_USERNAME: lda-worker
    WHEELHOUSE_UPLOADER_SECRET:
      secure: irUwkBHJdprBu763o02cCyAoFZIBImYGft43VnH+wYH6Z6qRxaucbqZhiJZ1eL7U

  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

matrix:
    fast_finish: true

install:
    # Install miniconda and fix headers
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - conda info

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

    # Upgrade to the latest version of pip to avoid it displaying warnings
    # about it being out of date.
    - "python -m pip install --disable-pip-version-check --user --upgrade pip"

    # Install the build dependencies of the project. If some dependencies contain
    # compiled extensions and are not provided as pre-built wheel packages,
    # pip will build them from source using the MSVC compiler matching the
    # target Python version and architecture
    - "python -m pip install -r requirements.txt"
    - "python -m pip install -r test-requirements.txt"
    - "python -m cython lda/_lda.pyx"

    # build the wheel and install it
    - "python setup.py bdist_wheel"
    - ps: "ls dist"

    # Install the generated wheel package to test it
    - "python -m pip install --pre --no-index --find-links dist/ lda"



build_script:
    # Install build requirements
    - conda install --yes %BUILD_DEPENDS%

    # generate c files
    - python -m cython -3 lda/_lda.pyx

    # build wheel:
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - ls dist/*

test_script:
    # create test env
    - conda create --yes -n test_env python=%PYTHON_VERSION% %TEST_DEPENDS%
    - activate test_env

    # install from wheel
    - pip install --no-index --find-links dist/ %PACKAGE_NAME%

    # run tests from install wheel
    - cd ..
    - python -m unittest discover lda

    # Smoke test of install_python script
    - set PYTHON=C:\Python37
    - ps: .\install_python.ps1
    - set PYTHON=C:\Python37-x64
    - ps: .\install_python.ps1


after_test:
  # If tests are successful, create binary packages for the project.
  # TODO: may need to set PBR_VERSION, submodules often confuse pbr
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - ps: "ls dist"
  # APPVEYOR_REPO_TAG will be true if commit is tagged
  - "IF /I %APPVEYOR_REPO_TAG%==true (%CMD_IN_ENV% pip install wheelhouse-uploader)"
  - "IF /I %APPVEYOR_REPO_TAG%==true (%CMD_IN_ENV% python -m wheelhouse_uploader upload --local-folder=dist --no-ssl-check --no-update-index --region=IAD wheels)"
